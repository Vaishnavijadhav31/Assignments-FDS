#include<stdio.h>
#include<stdlib.h>
#define N 40

int Create(int s[]);
void Display(int s[],int x);


int Union(int s1[],int s2[],int s3[],int m,int n);
int Intersection(int s1[],int s2[],int s3[],int m,int n);
int Difference(int s1[],int s2[],int s3[],int m,int n);
int Symm_Difference(int s1[],int s2[],int s3[],int m,int n);

int main()
{
	int s1[N],s2[N],s3[N],a,b,k=0;
	int ch;
	do
	{
   
		printf("\n\t\t\t\n********MENU********\n");
		printf("\n\t1.Create set");
		printf("\n\t2.Display set");
		printf("\n\t3.Union");
		printf("\n\t4.Intersection");
		printf("\n\t5.Difference");
		printf("\n\t6.Symmetric difference");
		printf("\n\t7.Quit");
    
		printf("\n\n\tYour choice:");
		scanf("%d",&ch);
	switch(ch)
	{
		case 1:
			printf("\n------Creating first set------\n");
			a=Create(s1);
			printf("\n------Creating second set------\n");
			b=Create(s2);
			break;

		case 2:
			printf("\nFirst Set is:");
			Display(s1,a);
			printf("\nSecond set is:");
			Display(s2,b);
			printf("\nThird set is:");
			Display(s3,k);
			break;
		case 3:
			printf("\nUnion of set:");
			k=Union(s1,s2,s3,a,b);
			Display(s3,k);
			break;
			
		case 4:
			printf("\nIntersection of set:");
			k=Intersection(s1,s2,s3,a,b);
			Display(s3,k);
			break;
		case 5:
			printf("\nDifference of set:");
			k=Difference(s1,s2,s3,a,b);
			Display(s3,k);
			break;
		case 6:
			printf("\nSymmetric difference of set:");
			k=Symm_Difference(s1,s2,s3,a,b);
			Display(s3,k);
			break;
		case 7:exit(0);
		default:
			printf("\n*******Invalid choice!!!*******");
			break;
	}}while(ch!=7);
}
int Create(int s[])
{
	int b,i,x;
	printf("\nEnter no of elements:");
	scanf("%d",&b);
	printf("\nEnter %d elements:",b);
	for(i=0;i<b;i++)
	scanf("%d",&s[i]);
	return(b);
}
void Display(int s[],int x)
{
	int i;
	printf("\t{");
	for(i=0;i<x;i++)
	printf(" %d ",s[i]);
	printf("}");
}
int Union(int s1[],int s2[],int s3[],int a,int b)
{
	int i,j,f,k=0;
	for(i=0;i<a+b;i++)
	{
		s3[i]=0;
	}
	for(i=0;i<a;i++)
	{
		s3[k]=s1[i];
		k++;
	}
	for(i=0;i<b;i++)
	{
	f=0;
		for(j=0;j<a;j++)
		{
			if(s2[i]==s1[j])
			{
				f=1;
				break;
			}
		}
		if(f==0)
		{
			s3[k]=s2[i];
			k++;
		}
	}
	return(k);
}
int Intersection(int s1[],int s2[],int s3[],int a,int b)
{
	int i,j,f,k=0;
	for(i=0;i<a+b;i++)
	{
		s3[i]=0;
	}
	for(i=0;i<b;i++)
	{
		f=1;
		for(j=0;j<b;j++)
		{
			if(s1[i]==s2[j])
			{
				f=0;
				break;
			}
		}

	if(f==0)
	{
		s3[k]=s1[i];
		k++;
	}
	}
return(k);
}
int Difference(int s1[],int s2[],int s3[],int a,int b)
{
	int i,j,k=0,f;
	for(i=0;i<a+b;i++)
	{
		s3[i]=0;
	}
	for(i=0;i<a;i++)
	{
		f=0;
		for(j=0;j<b;j++)
		{
			if(s1[i]==s2[j])
			{
				f=1;
				break;
			}
		}
		if(f==0)
		{	
			s3[k]=s1[i];
			k++;
		}
	}
return(k);
}
int Symm_Difference(int s1[],int s2[],int s3[],int a,int b)
{
	int i,j,k=0,f;
	for(i=0;i<a+b;i++)
	{
		s3[i]=0;
	}
	for(i=0;i<a;i++)
	{
		f=0;
		for(j=0;j<b;j++)
		{
			if(s1[i]==s2[j])
			{
				f=1;
				break;
			}
		}
		if(f==0)
		{
			s3[k]=s1[i];
			k++;
		}
	}
	for(i=0;i<b;i++)
	{
		f=0;
		for(j=0;j<a;j++)
		{
			if(s2[i]==s1[j])
			{	
				f=1;
				break;
			}
		}
		if(f==0)
		{
			s3[k]=s2[i];
			k++;
		}
	}
return(k);
}
